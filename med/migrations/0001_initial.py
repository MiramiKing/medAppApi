# Generated by Django 3.2 on 2021-04-15 11:14

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('Admin', 'Админ'), ('Doctor', 'Врач'), ('Patient', 'Пациент')], max_length=30, verbose_name='Роль')),
                ('key', models.CharField(max_length=20, verbose_name='Ключ')),
                ('registration_date', models.DateField(verbose_name='Дата регистрации')),
                ('firstName', models.CharField(max_length=30, verbose_name='Имя')),
                ('secondName', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('thirdName', models.CharField(max_length=30, verbose_name='Отчество')),
                ('photo', models.ImageField(null=True, upload_to='users', verbose_name='Ключ')),
                ('tel', models.CharField(max_length=20, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=250, verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Sanatorium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Название санатория')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Адрес почты')),
                ('tel', models.CharField(max_length=20, verbose_name='Телефон')),
                ('adress', models.CharField(max_length=20, verbose_name='Адерс')),
            ],
            options={
                'verbose_name': 'Санаторий',
                'verbose_name_plural': 'Санатории',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('gender', models.CharField(choices=[('Male', 'Мужской'), ('Female', 'Женский')], max_length=30, verbose_name='Пол')),
                ('region', models.CharField(max_length=30, verbose_name='Город')),
                ('city', models.CharField(max_length=30, verbose_name='Регион')),
                ('bonus', models.CharField(max_length=30, verbose_name='Бонус')),
                ('status', models.CharField(choices=[('Accept', 'Принят'), ('Discharged', 'Выписан')], max_length=30, verbose_name='Статус')),
                ('api_tracker', models.CharField(max_length=200, verbose_name='Апи-трекера')),
                ('type', models.CharField(choices=[('Vacationer', 'Отдыхающий'), ('Treating', 'Лечащийся')], max_length=30, verbose_name='Тип')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пациент',
                'verbose_name_plural': 'Пациенты',
            },
        ),
        migrations.CreateModel(
            name='PasportData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.IntegerField(verbose_name='Серия')),
                ('number', models.IntegerField(verbose_name='Номер')),
                ('date', models.DateField(verbose_name='Дата выдачи')),
                ('by_whom', models.CharField(max_length=255, verbose_name='Кем выдан')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='med.patient', verbose_name='Пациент')),
            ],
            options={
                'verbose_name': 'Поспортные данные',
                'verbose_name_plural': 'Поспортные данные',
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата создания опроса')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='med.patient', verbose_name='Пациент')),
                ('question', models.ManyToManyField(to='med.Question', verbose_name='Вопросы')),
            ],
            options={
                'verbose_name': 'Анкета пациента',
                'verbose_name_plural': 'Анкеты пациентов',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('date', models.DateField(verbose_name='Дата создания')),
                ('source', models.CharField(max_length=255, verbose_name='Источник')),
                ('sanatory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='med.sanatorium', verbose_name='Санаторий')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=30, verbose_name='Должность')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Администратор',
                'verbose_name_plural': 'Администраторы',
            },
        ),
    ]
